@@ -0,0 +1,6 @@
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="output" path="bin"/>
</classpath>
 1  
PracticeLab/.gitignore
@@ -0,0 +1 @@
/bin/
 17  
PracticeLab/.project
@@ -0,0 +1,17 @@
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>PracticeLab</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jdt.core.javanature</nature>
	</natures>
</projectDescription>
 11  
PracticeLab/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.compliance=1.8
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.source=1.8
 11  
PracticeLab/src/com/accessmodifier/practice/DefaultDemo.java
@@ -0,0 +1,11 @@
package com.accessmodifier.practice;

public class DefaultDemo {

	//default access modifier example

	void defaultMethod() {
		System.out.println("Example of Default access modifeir");
	}

}
 28  
PracticeLab/src/com/accessmodifier/practice/FinalDemo.java
@@ -0,0 +1,28 @@
package com.accessmodifier.practice;

 class Test {

	 final int num=20;

	final void finalMethod() {
		System.out.println("Example of Final access modifeir");
	//	System.out.println(num=45);
	}

	public void finalMethod1() {
		System.out.println("Example of Final access modifeir");
	}

}

public class FinalDemo extends Test {

/*	public void finalMethod() {
		
	}*/

	public static void main(String[] args) {

	}

}
 23  
PracticeLab/src/com/accessmodifier/practice/Main.java
@@ -0,0 +1,23 @@
package com.accessmodifier.practice;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PublicDemo pd = new PublicDemo();
		pd.publicMethod();

		System.out.println("--------------------");

		DefaultDemo dd = new DefaultDemo();
		dd.defaultMethod();

		System.out.println("---------------------");


		PrivateDemo pr=new PrivateDemo();


	}

}
 18  
PracticeLab/src/com/accessmodifier/practice/PrivateDemo.java
@@ -0,0 +1,18 @@
package com.accessmodifier.practice;

public class PrivateDemo {

	private int a=20;


	private void prvateMethod1() {
		System.out.println("Private access modifier "+a);
	}
	 public static void main(String[]args) {
		 PrivateDemo pr=new PrivateDemo();
		 pr.prvateMethod1();
		System.out.println(pr.a);

	 }

}
 11  
PracticeLab/src/com/accessmodifier/practice/PublicDemo.java
@@ -0,0 +1,11 @@
package com.accessmodifier.practice;

public class PublicDemo {

	//public access modifier example

	public void publicMethod() {
		System.out.println("Example of Public access modifeir");
	}

}
 28  
PracticeLab/src/com/automation/world/ArrayDemo.java
@@ -0,0 +1,28 @@
package com.automation.world;

public class ArrayDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	    String days[]= {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
	    System.out.println(days[0]);
	    System.out.println("--------------");
	    for(String dayName:days) {
	    	System.out.println(dayName);
	    }
	    System.out.println("-------------");
	    int nums[];
	    nums=new int[4];
	    nums[0]=50;
	    nums[1]=60;
	    nums[2]=70;
	    nums[3]=80;
	    for(int i=0;i<nums.length;i++) {
	    	System.out.println(nums[i]);
	    }


	}

}
 50  
PracticeLab/src/com/automation/world/BoxDemo.java
@@ -0,0 +1,50 @@
package com.automation.world;


class Box{

	int width;
	int height;
	int depth;	
}



public class BoxDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Box b;
		b=new Box();

		b.width=10;
		b.height=20;
		b.depth=20;
		double volume;

	    volume=b.width*b.height*b.depth;
	    System.out.println("Volume of Box b is:"+volume);

	    Box b1;
	    b1=new Box();

		b1.width=20;
		b1.height=30;
		b1.depth=40;

		volume=b1.width*b1.height*b1.depth;
	    System.out.println("Volume of Box b1 is:"+volume);


		Box b2;
	    b2=b1;
	    System.out.println("Volume of Box b2 is:"+volume);

	    b2=null;




	}

}
 16  
PracticeLab/src/com/automation/world/BreakDemo.java
@@ -0,0 +1,16 @@
package com.automation.world;

public class BreakDemo {

	@SuppressWarnings("unused")
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		for(int i=1;i<=5;i++) {
			System.out.println("Value of i is:"+i);
		    break;
		}


	}

}
 40  
PracticeLab/src/com/automation/world/Calculation.java
@@ -0,0 +1,40 @@
package com.automation.world;

import java.util.Scanner;

public class Calculation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub


		Scanner sc = new Scanner(System.in);

		System.out.println("Enter Two Numbers");
		int a = sc.nextInt();
		int b = sc.nextInt();


		System.out.println("Enter an Operator");
		char operator = sc.next().charAt(0);

		switch (operator) {
		case '+':
			System.out.println("Addition of two numbers:"+(a + b));
			break;
		case '-':
			System.out.println("Subtraction of two numbers:"+(a - b));
			break;
		case '*':
			System.out.println("Multiplication of two numbers:"+(a * b));
			break;
		case '/':
			System.out.println("Division of two numbers:"+(a / b));
			break;
		default:
			System.out.println("ERROR: Unsupported Operation");
		}

	}

}
 16  
PracticeLab/src/com/automation/world/CircleArea.java
@@ -0,0 +1,16 @@
package com.automation.world;

public class CircleArea {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		float r=6.3f;
		float pie=3.14f;
		double area;
		area=pie*r*r;
		System.out.println("Area of Circle is: "+String.format("%.2f",area));


	}

}
 26  
PracticeLab/src/com/automation/world/ConstructorDemo.java
@@ -0,0 +1,26 @@
package com.automation.world;

public class ConstructorDemo {

	int a;
	int b;

	public ConstructorDemo(int a,int b) {
		this.a=a;
		this.b=b;
	}
	public void display() {
		System.out.println(a);
		System.out.println(b);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ConstructorDemo cd=new ConstructorDemo(5,10);
		cd.display();


	}

}
 26  
PracticeLab/src/com/automation/world/ContinueDemo.java
@@ -0,0 +1,26 @@
package com.automation.world;

public class ContinueDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int i;
		for(i=1;i<=5;i++) {
			System.out.println("value of i is:"+i);
			if(i==3) {
			continue;
			}
			System.out.println(i);
		}
/*		System.out.println("-----------------");
		
		for(int j=20;j<=25;j++) {
			if(j==23) {
				continue;
			}
			System.out.println("Value of j is:"+j);
		}*/

	}

}
 25  
PracticeLab/src/com/automation/world/DefClssObjctConstrctor.java
@@ -0,0 +1,25 @@
package com.automation.world;

//We create the class with the name of DefClssObjctConstrctor
public class DefClssObjctConstrctor {

	String name;

	//Constructor created
	public DefClssObjctConstrctor(String name) {
		this.name=name;
	}

	public void display() {
		System.out.println("The name of the Employee is "+name);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Creating of Object for the given Class
		DefClssObjctConstrctor obj=new DefClssObjctConstrctor("Faraih Islam");
		obj.display();

	}

}
 12  
PracticeLab/src/com/automation/world/Demo.java
@@ -0,0 +1,12 @@
package com.automation.world;

public class Demo{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Welcome to Automation Testing World");


	}

}
 19  
PracticeLab/src/com/automation/world/DoWhileLoopDemo.java
@@ -0,0 +1,19 @@
package com.automation.world;

public class DoWhileLoopDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num=1;
/*		do {
			System.out.println("Welcome to Java Programming "+num);
			num++;
		}while(num<=10);*/

		do {
			System.out.println("Welcome to Java world");
		}while(num>10);

	}

}
 14  
PracticeLab/src/com/automation/world/DynamicInitializationdemo.java
@@ -0,0 +1,14 @@
package com.automation.world;

public class DynamicInitializationdemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		double a=5.0;double b=0;
		double c;
		c=Math.sqrt(a*a+b*b);
		System.out.println("Value of c is:"+c);

	}

}
 29  
PracticeLab/src/com/automation/world/ForLoop.java
@@ -0,0 +1,29 @@
package com.automation.world;

public class ForLoop {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
/*		int k;
		for(k=1;k<=10;k++) {
			System.out.println(k);
		}*/

/*		int i=1;
		int j=5;
		for(i=1;i<j;i++) {
			System.out.println("Value of i is:"+i);
			System.out.println("Value of j is:"+j);
			j--;
		}*/

	int a,b;

	for(a=40,b=50;a<b;a++,b--) {
		System.out.println("Value of a is:"+a);
		System.out.println("Value of b is:"+b);
	}

	}

}
 24  
PracticeLab/src/com/automation/world/IfElseInSwithCase.java
@@ -0,0 +1,24 @@
package com.automation.world;

public class IfElseInSwithCase {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int x=20;
		int y=40;
		if(x>y) {
			x=1;

		}else
			x=2;

			switch(x) {
			case 1:
				System.out.println("X is greater than Y");
			case 2:
				System.out.println("X is smaller than Y");
			}

	}

}
 21  
PracticeLab/src/com/automation/world/LargestNumDemo.java
@@ -0,0 +1,21 @@
package com.automation.world;

public class LargestNumDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a = 85;
		int b = 75;
		int c = 95;
		if (a >= b && a >= c) {
			System.out.println(a + " is biggest no");
		}
		if (b >= c && b >= a) {
			System.out.println(b + " is biggest no");
		}
		if (c >= a && c >= b) {
			System.out.println(c + " is biggest no");
		}
	}

}
 51  
PracticeLab/src/com/automation/world/OperatorsDemo.java
@@ -0,0 +1,51 @@
package com.automation.world;

public class OperatorsDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		incrementOperator();
		plusOperator();
		logicalOperator();

	}
	public static void incrementOperator() {
		int a=4;
		++a;
		System.out.println(a);
		int b=8;
		b++;
		System.out.println(b);

	}
	public static void plusOperator() {
		String name="Faraih";
		String name1="Islam";
		System.out.println(name+name1);

		int a=123;
		int b=2345;
		System.out.println(a+b);

		String name2="abcd";
		String number="123";
		System.out.println(name2+number);

	}
	@SuppressWarnings("unused")
	public static void logicalOperator() {
		System.out.println(true && true);
		System.out.println(true && false);
		System.out.println(false && false);
		System.out.println(true || true);
		System.out.println(true || false);
		System.out.println(false || false);
	}
	public static void relationalOperator() {
		int a=20;
		int b=30;
		System.out.println(a<b);
		System.out.println(a>b);
	}

}
 26  
PracticeLab/src/com/automation/world/OverloadingDemo.java
@@ -0,0 +1,26 @@
package com.automation.world;

public class OverloadingDemo {

	public void hello() {
		System.out.println("Hello with no parameters");
	}

	public void hello(int a) {
		System.out.println("Hello with single parameters "+a);
	}
	public void hello(int a,int b) {
		System.out.println("Hello with double parameters "+a+","+b);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		OverloadingDemo ol=new OverloadingDemo();
		ol.hello();
		ol.hello(10);
		ol.hello(10, 20);


	}

}
 42  
PracticeLab/src/com/automation/world/OverridingDemo.java
@@ -0,0 +1,42 @@
package com.automation.world;

class Parent {

	int i;
	int j;

public Parent(int a,int b){
	this.i=a;
	this.j=b;
}

public void show() {
	System.out.println("The value of i->"+i+" and j is->"+j);
}
}

public class OverridingDemo extends Parent {

	int k;
	public OverridingDemo(int i,int j,int c){
		super(i,j);
		this.k=c;
	}
	public void show() {
		super.show();
		System.out.println("The value of k->"+k);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		OverridingDemo child=new OverridingDemo(10,20,30);
		child.show();

		System.out.println("-------------------------");

		Parent p=new Parent(10,20);
		p.show();

	}

}
 23  
PracticeLab/src/com/automation/world/PrimeNo.java
@@ -0,0 +1,23 @@
package com.automation.world;

public class PrimeNo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int i,m=0,flag=0;      
		  int n=3;//it is the number to be checked    
		  m=n/2;      
		  if(n==0||n==1){  
		   System.out.println(n+" is not prime number");      
		  }else{  
		   for(i=2;i<=m;i++){      
		    if(n%i==0){      
		     System.out.println(n+" is not prime number");      
		     flag=1;      
		     break;      
		    }      
		   }      
		   if(flag==0)  { System.out.println(n+" is prime number"); }  
		  }//end of else  
	}
}
 19  
PracticeLab/src/com/automation/world/PrintingSeasonThroughIfElse.java
@@ -0,0 +1,19 @@
package com.automation.world;

public class PrintingSeasonThroughIfElse {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int month=Integer.parseInt(args[0]);
		if(month>=1 && month<=3) {
			System.out.println("Winter Season");
		}else if(month>=4 && month<=6) {
			System.out.println("Summer Season");
		}else if(month>=7 && month<=9) {
			System.out.println("Rainy season");
		}else
			System.out.println("Spring season");

	}

}
 30  
PracticeLab/src/com/automation/world/ScopeOfVariableDemo.java
@@ -0,0 +1,30 @@
package com.automation.world;

public class ScopeOfVariableDemo {

	 int a=10;
	 static int f=30;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ScopeOfVariableDemo s=new ScopeOfVariableDemo();
		int b=15;//It is access within the main method
		System.out.println("Value of a is :"+s.a);
		System.out.println("Value of b is :"+f);
		if(s.a==10) {
			int c=20;
			System.out.println("Value of c is :"+c);
		}
		System.out.println("Value of b is :"+b);
	//	System.out.println(c);// we can't access local variable outside the block

	}
	public static void m1() {
		int e=45;
	System.out.println("Value of b is :"+e);
	System.out.println("Value of f is :"+f);
	//System.out.println("Value of b is :"+a);// Variable will not hold the value, once it is out of scope

	}

}
 20  
PracticeLab/src/com/automation/world/StudentDemo.java
@@ -0,0 +1,20 @@
package com.automation.world;

public class StudentDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String name="Faraih Islam";
		String university="RTMNU";
		String mobNo="9930609341";
		String branch="CSE";
		System.out.println(name);
		System.out.println(university);
		System.out.println(mobNo);
		System.out.println(branch);
		System.out.println("----------------");
		System.out.println("Name of Student:-"+name+",University Name:-"+university+",Mobile Number:-"+mobNo+",Branch:-"+branch);

	}

}
 40  
PracticeLab/src/com/automation/world/SwitchDemo.java
@@ -0,0 +1,40 @@
package com.automation.world;

public class SwitchDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int month=Integer.parseInt(args[0]);

		String season="";
		switch(month)
		{
			case 1: 
			case 2:
			case 3:
				season="Winter";
				break;
			case 4:
			case 5:
			case 6: 
				season="Summer";
				break;
			case 7: 
			case 8:
			case 9:
				season="Rainy";
				break;
			case 10: 
			case 11:
			case 12: 
				season="Spring";
				break;
				default:
					System.out.println("Invalid Month");

		}


	}

}
 21  
PracticeLab/src/com/automation/world/TwoDimenArray.java
@@ -0,0 +1,21 @@
package com.automation.world;

public class TwoDimenArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int array[][];
		array=new int[4][5];
		int k=0;

		for(int i=0;i<4;i++) {
			for(int j=0;j<5;j++) {
				array[i][j]=k;
				System.out.println("Value of Array is["+i+"]["+j+"] is:"+array[i][j]);
				k++;
			}System.out.println("------------------------------");
		}

	}

}
 25  
PracticeLab/src/com/automation/world/TypeCastingDemo.java
@@ -0,0 +1,25 @@
package com.automation.world;

public class TypeCastingDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//Implicit Type

		int a=15;
		double b=a;
		System.out.println(b);

		//Explicit Type-casting


		double c=25.45;
		int d=(int)c;
		System.out.println(d);



	}

}
 26  
PracticeLab/src/com/automation/world/VariablesDemo.java
@@ -0,0 +1,26 @@
package com.automation.world;

public class VariablesDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a=129;
		System.out.println(a);
		float num=12.4f;
		System.out.println(num);
		char ch='f';
		System.out.println(ch);
		boolean flag=true;
		System.out.println(flag);
		System.out.println("------------------------------");
		a=125;
		System.out.println(a);
		num=10.5f;
		System.out.println(num);
		ch='a';
		System.out.println(ch);
		flag=false;
		System.out.println(flag);
	}

}
 31  
PracticeLab/src/com/automation/world/VolumeMethod.java
@@ -0,0 +1,31 @@
package com.automation.world;

public class VolumeMethod {

	int height;
	int width;
	int depth;

	public void volume() {
		System.out.println("Volume is:"+width*depth*height);
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		VolumeMethod v=new VolumeMethod();
		v.depth=10;
		v.height=20;
		v.width=30;
		v.volume();

		VolumeMethod v1=new VolumeMethod();
		v1.depth=20;
		v1.height=30;
		v1.width=40;
		v1.volume();


	}

}
 23  
PracticeLab/src/com/automation/world/WhileDemo.java
@@ -0,0 +1,23 @@
package com.automation.world;

public class WhileDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num=10;
		int num1=20;
/*		while(num<=10) {
			System.out.println("Welcome to Java Programming-"+num);
			num++;
		}*/

/*		while(++num > --num1);
			System.out.println("Without body");*/

		while(++num < --num1) {
			System.out.println("Value of num is:"+num+" and Value of num1 is:"+num1);
		}

	}

}
 14  
PracticeLab/src/com/inheritance/practice/Child.java
@@ -0,0 +1,14 @@
package com.inheritance.practice;

public class Child extends Parent {
	//Inheritance Example

	public void childMethod1() {
		System.out.println("Child Class method1");
	}

	public void childMethod2() {
		System.out.println("Child Class method2");
	}

}
 22  
PracticeLab/src/com/inheritance/practice/Main.java
@@ -0,0 +1,22 @@
package com.inheritance.practice;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Calling All methods of Parent and Child Class
		Parent p=new Parent();
		p.parentMethod1();
		p.parentMethod2();

		System.out.println("----------------------");

		Child c=new Child();
		c.childMethod1();
		c.childMethod2();
		c.parentMethod1();
		c.parentMethod2();

	}

}
 14  
PracticeLab/src/com/inheritance/practice/Parent.java
@@ -0,0 +1,14 @@
package com.inheritance.practice;

public class Parent {
	//Inheritance Example

	public void parentMethod1() {
		System.out.println("Parent Class method1");
	}

	public void parentMethod2() {
		System.out.println("Parent Class method2");
	}

}
